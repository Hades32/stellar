// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/cluster/v1/cluster.proto

/*
Package cluster is a generated protocol buffer package.

It is generated from these files:
	github.com/ehazlett/stellar/api/services/cluster/v1/cluster.proto

It has these top-level messages:
	InfoRequest
	InfoResponse
	ContainersRequest
	ImagesRequest
	NodesRequest
	ContainersResponse
	ImagesResponse
	Node
	NodesResponse
	Container
	HealthRequest
	NodeHealth
	HealthResponse
*/
package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import google_api1 "github.com/gogo/googleapis"
import _ "github.com/gogo/protobuf/gogoproto"
import stellar_services_node_v1 "github.com/ehazlett/stellar/api/services/node/v1"
import stellar_services_health_v1 "github.com/ehazlett/stellar/api/services/health/v1"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{0} }

type InfoResponse struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{1} }

func (m *InfoResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ContainersRequest struct {
	Filters []string `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *ContainersRequest) Reset()                    { *m = ContainersRequest{} }
func (m *ContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainersRequest) ProtoMessage()               {}
func (*ContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{2} }

func (m *ContainersRequest) GetFilters() []string {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ImagesRequest struct {
}

func (m *ImagesRequest) Reset()                    { *m = ImagesRequest{} }
func (m *ImagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ImagesRequest) ProtoMessage()               {}
func (*ImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{3} }

type NodesRequest struct {
}

func (m *NodesRequest) Reset()                    { *m = NodesRequest{} }
func (m *NodesRequest) String() string            { return proto.CompactTextString(m) }
func (*NodesRequest) ProtoMessage()               {}
func (*NodesRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{4} }

type ContainersResponse struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *ContainersResponse) Reset()                    { *m = ContainersResponse{} }
func (m *ContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainersResponse) ProtoMessage()               {}
func (*ContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{5} }

func (m *ContainersResponse) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ImagesResponse struct {
	Images []*stellar_services_node_v1.Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImagesResponse) Reset()                    { *m = ImagesResponse{} }
func (m *ImagesResponse) String() string            { return proto.CompactTextString(m) }
func (*ImagesResponse) ProtoMessage()               {}
func (*ImagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{6} }

func (m *ImagesResponse) GetImages() []*stellar_services_node_v1.Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Node struct {
	ID      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{7} }

func (m *Node) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodesResponse) Reset()                    { *m = NodesResponse{} }
func (m *NodesResponse) String() string            { return proto.CompactTextString(m) }
func (*NodesResponse) ProtoMessage()               {}
func (*NodesResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{8} }

func (m *NodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Container struct {
	Container *stellar_services_node_v1.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Node      *Node                               `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{9} }

func (m *Container) GetContainer() *stellar_services_node_v1.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *Container) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{10} }

type NodeHealth struct {
	Node   *Node                                  `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Health *stellar_services_health_v1.NodeHealth `protobuf:"bytes,2,opt,name=health" json:"health,omitempty"`
}

func (m *NodeHealth) Reset()                    { *m = NodeHealth{} }
func (m *NodeHealth) String() string            { return proto.CompactTextString(m) }
func (*NodeHealth) ProtoMessage()               {}
func (*NodeHealth) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{11} }

func (m *NodeHealth) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeHealth) GetHealth() *stellar_services_health_v1.NodeHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

type HealthResponse struct {
	Nodes []*NodeHealth `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{12} }

func (m *HealthResponse) GetNodes() []*NodeHealth {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "stellar.services.cluster.v1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "stellar.services.cluster.v1.InfoResponse")
	proto.RegisterType((*ContainersRequest)(nil), "stellar.services.cluster.v1.ContainersRequest")
	proto.RegisterType((*ImagesRequest)(nil), "stellar.services.cluster.v1.ImagesRequest")
	proto.RegisterType((*NodesRequest)(nil), "stellar.services.cluster.v1.NodesRequest")
	proto.RegisterType((*ContainersResponse)(nil), "stellar.services.cluster.v1.ContainersResponse")
	proto.RegisterType((*ImagesResponse)(nil), "stellar.services.cluster.v1.ImagesResponse")
	proto.RegisterType((*Node)(nil), "stellar.services.cluster.v1.Node")
	proto.RegisterType((*NodesResponse)(nil), "stellar.services.cluster.v1.NodesResponse")
	proto.RegisterType((*Container)(nil), "stellar.services.cluster.v1.Container")
	proto.RegisterType((*HealthRequest)(nil), "stellar.services.cluster.v1.HealthRequest")
	proto.RegisterType((*NodeHealth)(nil), "stellar.services.cluster.v1.NodeHealth")
	proto.RegisterType((*HealthResponse)(nil), "stellar.services.cluster.v1.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (*ContainersResponse, error)
	Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*ImagesResponse, error)
	Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/stellar.services.cluster.v1.Cluster/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (*ContainersResponse, error) {
	out := new(ContainersResponse)
	err := grpc.Invoke(ctx, "/stellar.services.cluster.v1.Cluster/Containers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*ImagesResponse, error) {
	out := new(ImagesResponse)
	err := grpc.Invoke(ctx, "/stellar.services.cluster.v1.Cluster/Images", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Nodes(ctx context.Context, in *NodesRequest, opts ...grpc.CallOption) (*NodesResponse, error) {
	out := new(NodesResponse)
	err := grpc.Invoke(ctx, "/stellar.services.cluster.v1.Cluster/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/stellar.services.cluster.v1.Cluster/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Containers(context.Context, *ContainersRequest) (*ContainersResponse, error)
	Images(context.Context, *ImagesRequest) (*ImagesResponse, error)
	Nodes(context.Context, *NodesRequest) (*NodesResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.cluster.v1.Cluster/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Containers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Containers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.cluster.v1.Cluster/Containers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Containers(ctx, req.(*ContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Images_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Images(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.cluster.v1.Cluster/Images",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Images(ctx, req.(*ImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.cluster.v1.Cluster/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Nodes(ctx, req.(*NodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.cluster.v1.Cluster/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.cluster.v1.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Cluster_Info_Handler,
		},
		{
			MethodName: "Containers",
			Handler:    _Cluster_Containers_Handler,
		},
		{
			MethodName: "Images",
			Handler:    _Cluster_Images_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Cluster_Nodes_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Cluster_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/cluster/v1/cluster.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/cluster/v1/cluster.proto", fileDescriptorCluster)
}

var fileDescriptorCluster = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x75, 0x63, 0x9a, 0x92, 0x9b, 0x26, 0xd2, 0x51, 0x24, 0x46, 0x21, 0x75, 0x0a, 0x35, 0xad,
	0xb8, 0x4b, 0x22, 0xa2, 0x50, 0x2a, 0xb4, 0x15, 0x69, 0x5e, 0x14, 0xf6, 0x49, 0xd4, 0x97, 0x6d,
	0x76, 0xba, 0x59, 0xd8, 0xec, 0xc4, 0x9d, 0x49, 0x40, 0x1f, 0x15, 0x7f, 0x81, 0xe0, 0x1f, 0xf3,
	0xdd, 0x07, 0xf1, 0x87, 0xc8, 0xcc, 0xdc, 0xd9, 0x24, 0x68, 0x37, 0x6b, 0x9f, 0x32, 0x1f, 0xe7,
	0x9c, 0x7b, 0xee, 0xdd, 0x7b, 0x27, 0x70, 0x1c, 0xc5, 0x72, 0x3c, 0x3b, 0x77, 0x47, 0x7c, 0xe2,
	0xb1, 0x71, 0xf0, 0x29, 0x61, 0x52, 0x7a, 0x42, 0xb2, 0x24, 0x09, 0x32, 0x2f, 0x98, 0xc6, 0x9e,
	0x60, 0xd9, 0x3c, 0x1e, 0x31, 0xe1, 0x8d, 0x92, 0x99, 0x90, 0x2c, 0xf3, 0xe6, 0x7d, 0xbb, 0x74,
	0xa7, 0x19, 0x97, 0x9c, 0xdc, 0x45, 0xb8, 0x6b, 0xa1, 0xae, 0xbd, 0x9f, 0xf7, 0x3b, 0xf7, 0x22,
	0xce, 0xa3, 0x84, 0x69, 0xa9, 0x20, 0x4d, 0xb9, 0x0c, 0x64, 0xcc, 0x53, 0x61, 0xa8, 0x9d, 0x5b,
	0x11, 0x8f, 0xb8, 0x5e, 0x7a, 0x6a, 0x85, 0xa7, 0xdd, 0x95, 0xb8, 0x29, 0x0f, 0x99, 0x0a, 0xaa,
	0x7e, 0x11, 0xb0, 0xbb, 0x02, 0x18, 0xb3, 0x20, 0x91, 0x63, 0x05, 0x31, 0x2b, 0x03, 0xa2, 0x4d,
	0x68, 0x0c, 0xd3, 0x0b, 0xee, 0xb3, 0x0f, 0x33, 0x26, 0x24, 0xdd, 0x83, 0x2d, 0xb3, 0x15, 0x53,
	0x9e, 0x0a, 0x46, 0x6e, 0x43, 0x25, 0x0e, 0xdb, 0xce, 0x8e, 0xd3, 0xab, 0x9f, 0xd4, 0x7e, 0xfd,
	0xec, 0x56, 0x86, 0x2f, 0xfc, 0x4a, 0x1c, 0xd2, 0x47, 0xb0, 0x7d, 0xca, 0x53, 0x19, 0xc4, 0x29,
	0xcb, 0x04, 0x92, 0x49, 0x1b, 0x36, 0x2f, 0xe2, 0x44, 0xb2, 0x4c, 0xb4, 0x9d, 0x9d, 0xeb, 0xbd,
	0xba, 0x6f, 0xb7, 0xf4, 0x06, 0x34, 0x87, 0x93, 0x20, 0x62, 0x16, 0x4a, 0x5b, 0xb0, 0xf5, 0x8a,
	0x87, 0x8b, 0xfd, 0x7b, 0x20, 0xcb, 0x7a, 0x18, 0xfd, 0x25, 0xc0, 0x28, 0x3f, 0xd5, 0x9a, 0x8d,
	0xc1, 0x9e, 0x5b, 0x50, 0x48, 0x37, 0x17, 0xf1, 0x97, 0x98, 0x74, 0x08, 0x2d, 0x1b, 0x1e, 0x95,
	0x9f, 0x42, 0x2d, 0xd6, 0x27, 0xa8, 0xda, 0xfd, 0x5b, 0x55, 0x57, 0x72, 0xde, 0x77, 0x35, 0xd3,
	0x47, 0x38, 0x7d, 0x06, 0x55, 0x65, 0xfc, 0xb2, 0xc2, 0xa8, 0x1a, 0x04, 0x61, 0x98, 0x31, 0x21,
	0xda, 0x15, 0x75, 0xe9, 0xdb, 0x2d, 0x3d, 0x83, 0x26, 0xa6, 0x9c, 0x7b, 0xd8, 0x50, 0x31, 0xac,
	0x85, 0xfb, 0x85, 0x89, 0x29, 0xaa, 0x6f, 0xf0, 0xf4, 0xab, 0x03, 0xf5, 0x3c, 0x51, 0x72, 0x0c,
	0xf5, 0x3c, 0x55, 0x6d, 0xa8, 0x31, 0xd8, 0xbd, 0x3c, 0x9b, 0x45, 0x81, 0x16, 0x2c, 0xf2, 0x04,
	0xaa, 0xea, 0x5e, 0x3b, 0x2e, 0x65, 0x44, 0xc3, 0xd5, 0x57, 0x3d, 0xd3, 0xbd, 0x64, 0xbf, 0xe2,
	0x17, 0x07, 0x40, 0xdd, 0x9b, 0xd3, 0x5c, 0xd6, 0xf9, 0x2f, 0x59, 0xf2, 0x1c, 0x6a, 0xa6, 0x45,
	0xd1, 0xcf, 0x3f, 0xbe, 0x38, 0xb6, 0x30, 0xf2, 0xd0, 0x04, 0xb2, 0xe8, 0x6b, 0x68, 0x59, 0x5b,
	0x58, 0xe9, 0xa3, 0xd5, 0x4a, 0x3f, 0x58, 0xeb, 0x04, 0xf9, 0x86, 0x35, 0xf8, 0x5e, 0x85, 0xcd,
	0x53, 0x03, 0x20, 0xef, 0xa0, 0xaa, 0x06, 0x84, 0xf4, 0x0a, 0x35, 0x96, 0x46, 0xaa, 0xb3, 0x5f,
	0x02, 0x89, 0x3e, 0x27, 0x00, 0x8b, 0x29, 0x20, 0x6e, 0xb9, 0x4e, 0xb7, 0x33, 0xd4, 0xf1, 0x4a,
	0xe3, 0x31, 0x5c, 0x00, 0x35, 0x33, 0x16, 0xe4, 0xa0, 0xd8, 0xe3, 0xf2, 0xe8, 0x76, 0x1e, 0x96,
	0xc2, 0x62, 0x88, 0x8f, 0xb0, 0xa1, 0x9b, 0x9e, 0xec, 0xaf, 0xad, 0x79, 0x1e, 0xe0, 0xa0, 0x0c,
	0xd4, 0xe8, 0xd3, 0x3b, 0x9f, 0x7f, 0xfc, 0xfe, 0x56, 0xb9, 0x49, 0xb6, 0x97, 0x1e, 0x5c, 0xfd,
	0x06, 0x0a, 0x95, 0x1d, 0xf6, 0x61, 0xb1, 0xe0, 0x4a, 0x0b, 0xaf, 0xc9, 0x6e, 0xb5, 0xaf, 0x4e,
	0x8e, 0xde, 0x1e, 0x5e, 0xe1, 0x8f, 0xe1, 0x10, 0x97, 0x6f, 0xae, 0x9d, 0xd7, 0xf4, 0x23, 0xfc,
	0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x1c, 0x76, 0xd9, 0x60, 0x06, 0x00, 0x00,
}
