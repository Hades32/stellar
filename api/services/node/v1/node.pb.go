// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/node/v1/node.proto

/*
Package node is a generated protocol buffer package.

It is generated from these files:
	github.com/ehazlett/stellar/api/services/node/v1/node.proto

It has these top-level messages:
	ContainersRequest
	Container
	ContainersResponse
	ImagesRequest
	Image
	ImagesResponse
*/
package node

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ContainersRequest struct {
}

func (m *ContainersRequest) Reset()                    { *m = ContainersRequest{} }
func (m *ContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainersRequest) ProtoMessage()               {}
func (*ContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{0} }

type Container struct {
	ID          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image       string                `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Labels      map[string]string     `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec        *google_protobuf1.Any `protobuf:"bytes,4,opt,name=spec" json:"spec,omitempty"`
	Snapshotter string                `protobuf:"bytes,5,opt,name=snapshotter,proto3" json:"snapshotter,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{1} }

func (m *Container) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Container) GetSpec() *google_protobuf1.Any {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Container) GetSnapshotter() string {
	if m != nil {
		return m.Snapshotter
	}
	return ""
}

type ContainersResponse struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *ContainersResponse) Reset()                    { *m = ContainersResponse{} }
func (m *ContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainersResponse) ProtoMessage()               {}
func (*ContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{2} }

func (m *ContainersResponse) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ImagesRequest struct {
}

func (m *ImagesRequest) Reset()                    { *m = ImagesRequest{} }
func (m *ImagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ImagesRequest) ProtoMessage()               {}
func (*ImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{3} }

type Image struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{4} }

func (m *Image) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ImagesResponse struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImagesResponse) Reset()                    { *m = ImagesResponse{} }
func (m *ImagesResponse) String() string            { return proto.CompactTextString(m) }
func (*ImagesResponse) ProtoMessage()               {}
func (*ImagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{5} }

func (m *ImagesResponse) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainersRequest)(nil), "stellar.services.node.v1.ContainersRequest")
	proto.RegisterType((*Container)(nil), "stellar.services.node.v1.Container")
	proto.RegisterType((*ContainersResponse)(nil), "stellar.services.node.v1.ContainersResponse")
	proto.RegisterType((*ImagesRequest)(nil), "stellar.services.node.v1.ImagesRequest")
	proto.RegisterType((*Image)(nil), "stellar.services.node.v1.Image")
	proto.RegisterType((*ImagesResponse)(nil), "stellar.services.node.v1.ImagesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (*ContainersResponse, error)
	Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*ImagesResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (*ContainersResponse, error) {
	out := new(ContainersResponse)
	err := grpc.Invoke(ctx, "/stellar.services.node.v1.Node/Containers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (*ImagesResponse, error) {
	out := new(ImagesResponse)
	err := grpc.Invoke(ctx, "/stellar.services.node.v1.Node/Images", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Containers(context.Context, *ContainersRequest) (*ContainersResponse, error)
	Images(context.Context, *ImagesRequest) (*ImagesResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Containers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Containers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.node.v1.Node/Containers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Containers(ctx, req.(*ContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Images_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Images(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.node.v1.Node/Images",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Images(ctx, req.(*ImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.node.v1.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Containers",
			Handler:    _Node_Containers_Handler,
		},
		{
			MethodName: "Images",
			Handler:    _Node_Images_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/node/v1/node.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/node/v1/node.proto", fileDescriptorNode)
}

var fileDescriptorNode = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x55, 0xd2, 0x36, 0xd2, 0x4e, 0xc5, 0x97, 0xa9, 0x50, 0xe8, 0xa5, 0x55, 0x38, 0x10, 0x09,
	0x64, 0x6b, 0x8b, 0xd0, 0x02, 0x7b, 0x62, 0x17, 0x84, 0x2a, 0x21, 0x0e, 0xbe, 0x01, 0x27, 0x37,
	0x19, 0xd2, 0x88, 0xac, 0x1d, 0x62, 0x27, 0x52, 0xf8, 0x07, 0xfc, 0x37, 0x7e, 0x03, 0x07, 0x7e,
	0x09, 0x8a, 0xf3, 0x41, 0x2e, 0x55, 0xbb, 0x27, 0x7b, 0x66, 0xde, 0xcb, 0xbc, 0xf7, 0x14, 0xc3,
	0x65, 0x92, 0x9a, 0x7d, 0xb9, 0xa3, 0x91, 0xba, 0x61, 0xb8, 0x17, 0x3f, 0x33, 0x34, 0x86, 0x69,
	0x83, 0x59, 0x26, 0x0a, 0x26, 0xf2, 0x94, 0x69, 0x2c, 0xaa, 0x34, 0x42, 0xcd, 0xa4, 0x8a, 0x91,
	0x55, 0xe7, 0xf6, 0xa4, 0x79, 0xa1, 0x8c, 0x22, 0x7e, 0x07, 0xa4, 0x3d, 0x88, 0xda, 0x61, 0x75,
	0xbe, 0x5c, 0x24, 0x2a, 0x51, 0x16, 0xc4, 0x9a, 0x5b, 0x8b, 0x5f, 0x3e, 0x4e, 0x94, 0x4a, 0x32,
	0x64, 0xb6, 0xda, 0x95, 0xdf, 0x98, 0x90, 0x75, 0x3b, 0x0a, 0x1e, 0xc2, 0x83, 0x6b, 0x25, 0x8d,
	0x48, 0x25, 0x16, 0x9a, 0xe3, 0x8f, 0x12, 0xb5, 0x09, 0x7e, 0xb9, 0x70, 0x36, 0x74, 0xc9, 0x23,
	0x70, 0xd3, 0xd8, 0x77, 0xd6, 0x4e, 0x78, 0x76, 0xe5, 0xfd, 0xfd, 0xb3, 0x72, 0xb7, 0xef, 0xb8,
	0x9b, 0xc6, 0x64, 0x01, 0xb3, 0xf4, 0x46, 0x24, 0xe8, 0xbb, 0xcd, 0x88, 0xb7, 0x05, 0xf9, 0x00,
	0x5e, 0x26, 0x76, 0x98, 0x69, 0x7f, 0xb2, 0x9e, 0x84, 0xf3, 0x0d, 0xa3, 0x87, 0xc4, 0xd2, 0x61,
	0x05, 0xfd, 0x68, 0x19, 0xef, 0xa5, 0x29, 0x6a, 0xde, 0xd1, 0x49, 0x08, 0x53, 0x9d, 0x63, 0xe4,
	0x4f, 0xd7, 0x4e, 0x38, 0xdf, 0x2c, 0x68, 0xeb, 0x81, 0xf6, 0x1e, 0xe8, 0x5b, 0x59, 0x73, 0x8b,
	0x20, 0x6b, 0x98, 0x6b, 0x29, 0x72, 0xbd, 0x57, 0xc6, 0x60, 0xe1, 0xcf, 0xac, 0x9c, 0x71, 0x6b,
	0xf9, 0x1a, 0xe6, 0xa3, 0x15, 0xe4, 0x3e, 0x4c, 0xbe, 0x63, 0xdd, 0x5a, 0xe2, 0xcd, 0xb5, 0xf1,
	0x52, 0x89, 0xac, 0x1c, 0xbc, 0xd8, 0xe2, 0x8d, 0xfb, 0xca, 0x09, 0x3e, 0x03, 0x19, 0x07, 0xa4,
	0x73, 0x25, 0x35, 0x92, 0x6b, 0x80, 0x68, 0xe8, 0xfa, 0x8e, 0x75, 0xfa, 0xe4, 0x04, 0xa7, 0x7c,
	0x44, 0x0b, 0xee, 0xc1, 0x9d, 0x6d, 0x93, 0xd9, 0x90, 0xfb, 0x0a, 0x66, 0xb6, 0x71, 0x28, 0xf2,
	0x60, 0x0b, 0x77, 0x7b, 0x46, 0x27, 0xe4, 0x02, 0x3c, 0x9b, 0x7b, 0x2f, 0x62, 0x75, 0x58, 0x84,
	0x65, 0xf2, 0x0e, 0xbe, 0xf9, 0xed, 0xc0, 0xf4, 0x93, 0x8a, 0x91, 0x24, 0x00, 0xff, 0x0d, 0x92,
	0x67, 0x27, 0x98, 0xe8, 0xf5, 0x2e, 0x9f, 0x9f, 0x06, 0xee, 0xa4, 0x7e, 0x05, 0xaf, 0x15, 0x4f,
	0x9e, 0x1e, 0x11, 0x39, 0x2c, 0x08, 0x8f, 0x03, 0xdb, 0x8f, 0x5f, 0x5d, 0x7c, 0x79, 0x79, 0xdb,
	0x17, 0x75, 0xd9, 0x9c, 0x3b, 0xcf, 0xfe, 0x50, 0x2f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x2b, 0x09, 0xa0, 0x91, 0x03, 0x00, 0x00,
}
