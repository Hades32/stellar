// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/datastore/v1/datastore.proto

/*
Package datastore is a generated protocol buffer package.

It is generated from these files:
	github.com/ehazlett/stellar/api/services/datastore/v1/datastore.proto

It has these top-level messages:
	AcquireLockRequest
	ReleaseLockRequest
	CreateBucketRequest
	SetRequest
	KeyValue
	GetRequest
	SearchRequest
	SearchResponse
	GetResponse
	DeleteRequest
	BackupRequest
	BackupResponse
	RestoreRequest
	ShutdownRequest
	SyncRequest
	SyncOperation
	PeerSyncRequest
*/
package datastore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SyncAction int32

const (
	SyncAction_SET    SyncAction = 0
	SyncAction_DELETE SyncAction = 1
)

var SyncAction_name = map[int32]string{
	0: "SET",
	1: "DELETE",
}
var SyncAction_value = map[string]int32{
	"SET":    0,
	"DELETE": 1,
}

func (x SyncAction) String() string {
	return proto.EnumName(SyncAction_name, int32(x))
}
func (SyncAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{0} }

type AcquireLockRequest struct {
	Timeout *google_protobuf1.Duration `protobuf:"bytes,1,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *AcquireLockRequest) Reset()                    { *m = AcquireLockRequest{} }
func (m *AcquireLockRequest) String() string            { return proto.CompactTextString(m) }
func (*AcquireLockRequest) ProtoMessage()               {}
func (*AcquireLockRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{0} }

func (m *AcquireLockRequest) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type ReleaseLockRequest struct {
}

func (m *ReleaseLockRequest) Reset()                    { *m = ReleaseLockRequest{} }
func (m *ReleaseLockRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseLockRequest) ProtoMessage()               {}
func (*ReleaseLockRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{1} }

type CreateBucketRequest struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (m *CreateBucketRequest) Reset()                    { *m = CreateBucketRequest{} }
func (m *CreateBucketRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBucketRequest) ProtoMessage()               {}
func (*CreateBucketRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{2} }

func (m *CreateBucketRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

type SetRequest struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Sync   bool   `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{3} }

func (m *SetRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SetRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{4} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetRequest struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{5} }

func (m *GetRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SearchRequest struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{6} }

func (m *SearchRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SearchRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type SearchResponse struct {
	Bucket string      `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Data   []*KeyValue `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{7} }

func (m *SearchResponse) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SearchResponse) GetData() []*KeyValue {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetResponse struct {
	Bucket string    `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Data   *KeyValue `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{8} }

func (m *GetResponse) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *GetResponse) GetData() *KeyValue {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteRequest struct {
	Bucket      string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Sync        bool   `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
	NoTombstone bool   `protobuf:"varint,4,opt,name=no_tombstone,json=noTombstone,proto3" json:"no_tombstone,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{9} }

func (m *DeleteRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *DeleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *DeleteRequest) GetNoTombstone() bool {
	if m != nil {
		return m.NoTombstone
	}
	return false
}

type BackupRequest struct {
}

func (m *BackupRequest) Reset()                    { *m = BackupRequest{} }
func (m *BackupRequest) String() string            { return proto.CompactTextString(m) }
func (*BackupRequest) ProtoMessage()               {}
func (*BackupRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{10} }

type BackupResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BackupResponse) Reset()                    { *m = BackupResponse{} }
func (m *BackupResponse) String() string            { return proto.CompactTextString(m) }
func (*BackupResponse) ProtoMessage()               {}
func (*BackupResponse) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{11} }

func (m *BackupResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RestoreRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RestoreRequest) Reset()                    { *m = RestoreRequest{} }
func (m *RestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreRequest) ProtoMessage()               {}
func (*RestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{12} }

func (m *RestoreRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ShutdownRequest struct {
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{13} }

type SyncRequest struct {
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{14} }

type SyncOperation struct {
	Action SyncAction `protobuf:"varint,1,opt,name=action,proto3,enum=stellar.services.datastore.v1.SyncAction" json:"action,omitempty"`
	Bucket string     `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key    string     `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SyncOperation) Reset()                    { *m = SyncOperation{} }
func (m *SyncOperation) String() string            { return proto.CompactTextString(m) }
func (*SyncOperation) ProtoMessage()               {}
func (*SyncOperation) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{15} }

func (m *SyncOperation) GetAction() SyncAction {
	if m != nil {
		return m.Action
	}
	return SyncAction_SET
}

func (m *SyncOperation) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SyncOperation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SyncOperation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PeerSyncRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *PeerSyncRequest) Reset()                    { *m = PeerSyncRequest{} }
func (m *PeerSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*PeerSyncRequest) ProtoMessage()               {}
func (*PeerSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorDatastore, []int{16} }

func (m *PeerSyncRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeerSyncRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*AcquireLockRequest)(nil), "stellar.services.datastore.v1.AcquireLockRequest")
	proto.RegisterType((*ReleaseLockRequest)(nil), "stellar.services.datastore.v1.ReleaseLockRequest")
	proto.RegisterType((*CreateBucketRequest)(nil), "stellar.services.datastore.v1.CreateBucketRequest")
	proto.RegisterType((*SetRequest)(nil), "stellar.services.datastore.v1.SetRequest")
	proto.RegisterType((*KeyValue)(nil), "stellar.services.datastore.v1.KeyValue")
	proto.RegisterType((*GetRequest)(nil), "stellar.services.datastore.v1.GetRequest")
	proto.RegisterType((*SearchRequest)(nil), "stellar.services.datastore.v1.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "stellar.services.datastore.v1.SearchResponse")
	proto.RegisterType((*GetResponse)(nil), "stellar.services.datastore.v1.GetResponse")
	proto.RegisterType((*DeleteRequest)(nil), "stellar.services.datastore.v1.DeleteRequest")
	proto.RegisterType((*BackupRequest)(nil), "stellar.services.datastore.v1.BackupRequest")
	proto.RegisterType((*BackupResponse)(nil), "stellar.services.datastore.v1.BackupResponse")
	proto.RegisterType((*RestoreRequest)(nil), "stellar.services.datastore.v1.RestoreRequest")
	proto.RegisterType((*ShutdownRequest)(nil), "stellar.services.datastore.v1.ShutdownRequest")
	proto.RegisterType((*SyncRequest)(nil), "stellar.services.datastore.v1.SyncRequest")
	proto.RegisterType((*SyncOperation)(nil), "stellar.services.datastore.v1.SyncOperation")
	proto.RegisterType((*PeerSyncRequest)(nil), "stellar.services.datastore.v1.PeerSyncRequest")
	proto.RegisterEnum("stellar.services.datastore.v1.SyncAction", SyncAction_name, SyncAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Datastore service

type DatastoreClient interface {
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Datastore_SyncClient, error)
	PeerSync(ctx context.Context, in *PeerSyncRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type datastoreClient struct {
	cc *grpc.ClientConn
}

func NewDatastoreClient(cc *grpc.ClientConn) DatastoreClient {
	return &datastoreClient{cc}
}

func (c *datastoreClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/AcquireLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/ReleaseLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/CreateBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Backup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Restore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Datastore_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Datastore_serviceDesc.Streams[0], c.cc, "/stellar.services.datastore.v1.Datastore/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &datastoreSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datastore_SyncClient interface {
	Recv() (*SyncOperation, error)
	grpc.ClientStream
}

type datastoreSyncClient struct {
	grpc.ClientStream
}

func (x *datastoreSyncClient) Recv() (*SyncOperation, error) {
	m := new(SyncOperation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datastoreClient) PeerSync(ctx context.Context, in *PeerSyncRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stellar.services.datastore.v1.Datastore/PeerSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Datastore service

type DatastoreServer interface {
	AcquireLock(context.Context, *AcquireLockRequest) (*google_protobuf.Empty, error)
	ReleaseLock(context.Context, *ReleaseLockRequest) (*google_protobuf.Empty, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*google_protobuf.Empty, error)
	Set(context.Context, *SetRequest) (*google_protobuf.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Delete(context.Context, *DeleteRequest) (*google_protobuf.Empty, error)
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	Restore(context.Context, *RestoreRequest) (*google_protobuf.Empty, error)
	Shutdown(context.Context, *ShutdownRequest) (*google_protobuf.Empty, error)
	Sync(*SyncRequest, Datastore_SyncServer) error
	PeerSync(context.Context, *PeerSyncRequest) (*google_protobuf.Empty, error)
}

func RegisterDatastoreServer(s *grpc.Server, srv DatastoreServer) {
	s.RegisterService(&_Datastore_serviceDesc, srv)
}

func _Datastore_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatastoreServer).Sync(m, &datastoreSyncServer{stream})
}

type Datastore_SyncServer interface {
	Send(*SyncOperation) error
	grpc.ServerStream
}

type datastoreSyncServer struct {
	grpc.ServerStream
}

func (x *datastoreSyncServer) Send(m *SyncOperation) error {
	return x.ServerStream.SendMsg(m)
}

func _Datastore_PeerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).PeerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.datastore.v1.Datastore/PeerSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).PeerSync(ctx, req.(*PeerSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Datastore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.datastore.v1.Datastore",
	HandlerType: (*DatastoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLock",
			Handler:    _Datastore_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _Datastore_ReleaseLock_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _Datastore_CreateBucket_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Datastore_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Datastore_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Datastore_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Datastore_Delete_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _Datastore_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Datastore_Restore_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Datastore_Shutdown_Handler,
		},
		{
			MethodName: "PeerSync",
			Handler:    _Datastore_PeerSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Datastore_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/ehazlett/stellar/api/services/datastore/v1/datastore.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/datastore/v1/datastore.proto", fileDescriptorDatastore)
}

var fileDescriptorDatastore = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xe1, 0x4e, 0xdb, 0x48,
	0x10, 0xc7, 0xcf, 0x71, 0xce, 0x84, 0x09, 0x09, 0xdc, 0x1e, 0x42, 0xb9, 0x9c, 0xee, 0x14, 0x2c,
	0xa4, 0xcb, 0x21, 0xb0, 0x4b, 0x90, 0x2a, 0x55, 0x7c, 0x40, 0xa1, 0x89, 0x68, 0x55, 0xd4, 0x22,
	0x07, 0x55, 0x15, 0xaa, 0xd4, 0x3a, 0xce, 0x40, 0xa2, 0x24, 0x5e, 0x63, 0xaf, 0xd3, 0xa6, 0x8f,
	0xd1, 0x17, 0xea, 0xab, 0x55, 0x5e, 0xef, 0x12, 0x03, 0x49, 0x37, 0xf0, 0x6d, 0x67, 0x3d, 0xf3,
	0x9f, 0x99, 0x9d, 0xdd, 0x9f, 0x0c, 0xed, 0xeb, 0x01, 0xeb, 0xc7, 0x5d, 0xcb, 0xa3, 0x63, 0x1b,
	0xfb, 0xee, 0xb7, 0x11, 0x32, 0x66, 0x47, 0x0c, 0x47, 0x23, 0x37, 0xb4, 0xdd, 0x60, 0x60, 0x47,
	0x18, 0x4e, 0x06, 0x1e, 0x46, 0x76, 0xcf, 0x65, 0x6e, 0xc4, 0x68, 0x88, 0xf6, 0xe4, 0x60, 0x66,
	0x58, 0x41, 0x48, 0x19, 0x25, 0xff, 0x88, 0x10, 0x4b, 0xba, 0x5b, 0x33, 0x8f, 0xc9, 0x41, 0xf5,
	0xef, 0x6b, 0x4a, 0xaf, 0x47, 0x68, 0x73, 0xe7, 0x6e, 0x7c, 0x65, 0xe3, 0x38, 0x60, 0xd3, 0x34,
	0xb6, 0xfa, 0xef, 0xfd, 0x8f, 0xbd, 0x38, 0x74, 0xd9, 0x80, 0xfa, 0xe9, 0x77, 0xf3, 0x35, 0x90,
	0xa6, 0x77, 0x13, 0x0f, 0x42, 0x3c, 0xa3, 0xde, 0xd0, 0xc1, 0x9b, 0x18, 0x23, 0x46, 0x0e, 0x61,
	0x85, 0x0d, 0xc6, 0x48, 0x63, 0x56, 0xd1, 0x6a, 0x5a, 0xbd, 0xd8, 0xf8, 0xcb, 0x4a, 0x75, 0x2c,
	0xa9, 0x63, 0xb5, 0x84, 0x8e, 0x23, 0x3d, 0xcd, 0x4d, 0x20, 0x0e, 0x8e, 0xd0, 0x8d, 0xb2, 0x52,
	0xe6, 0x3e, 0xfc, 0xf9, 0x32, 0x44, 0x97, 0xe1, 0x49, 0xec, 0x0d, 0x91, 0xc9, 0x0c, 0x5b, 0x60,
	0x74, 0xf9, 0x06, 0x4f, 0xb0, 0xea, 0x08, 0xcb, 0xfc, 0x0c, 0xd0, 0x51, 0x7a, 0x91, 0x0d, 0xd0,
	0x87, 0x38, 0xad, 0xe4, 0xf8, 0x66, 0xb2, 0x24, 0x9b, 0xf0, 0xfb, 0xc4, 0x1d, 0xc5, 0x58, 0xd1,
	0x6b, 0x5a, 0x7d, 0xcd, 0x49, 0x0d, 0x42, 0x20, 0x1f, 0x4d, 0x7d, 0xaf, 0x92, 0xaf, 0x69, 0xf5,
	0x82, 0xc3, 0xd7, 0x66, 0x03, 0x0a, 0x6f, 0x70, 0xfa, 0x9e, 0x7f, 0x17, 0x3a, 0xda, 0x1c, 0x9d,
	0x5c, 0x46, 0xc7, 0x7c, 0x0e, 0x70, 0xfa, 0x84, 0xaa, 0xcc, 0x63, 0x28, 0x75, 0xd0, 0x0d, 0xbd,
	0xbe, 0x2a, 0x74, 0x0b, 0x8c, 0x20, 0xc4, 0xab, 0xc1, 0x57, 0x11, 0x2d, 0x2c, 0x13, 0xa1, 0x2c,
	0x05, 0xa2, 0x80, 0xfa, 0x11, 0x2e, 0x54, 0x38, 0x82, 0x7c, 0x72, 0x2b, 0x2a, 0xb9, 0x9a, 0x5e,
	0x2f, 0x36, 0xfe, 0xb3, 0x7e, 0x79, 0x67, 0x2c, 0x79, 0x02, 0x0e, 0x0f, 0x32, 0xbb, 0x50, 0xe4,
	0xfd, 0x2d, 0x9d, 0x43, 0x7b, 0x7c, 0x8e, 0x00, 0x4a, 0x2d, 0x1c, 0x21, 0xc3, 0xc7, 0x0f, 0x57,
	0x8e, 0x51, 0x9f, 0x8d, 0x91, 0x6c, 0xc3, 0x9a, 0x4f, 0x3f, 0x31, 0x3a, 0xee, 0x46, 0x8c, 0xfa,
	0x28, 0x46, 0x5c, 0xf4, 0xe9, 0x85, 0xdc, 0x32, 0xd7, 0xa1, 0x74, 0xe2, 0x7a, 0xc3, 0x38, 0x90,
	0x77, 0x71, 0x07, 0xca, 0x72, 0x43, 0x74, 0x4a, 0x44, 0x47, 0x1a, 0x9f, 0x76, 0x5a, 0xe8, 0x0e,
	0x94, 0x1d, 0xe4, 0x5d, 0xc8, 0x4a, 0xe7, 0x79, 0xfd, 0x01, 0xeb, 0x9d, 0x7e, 0xcc, 0x7a, 0xf4,
	0x8b, 0x2f, 0xe5, 0x4b, 0x50, 0xec, 0x4c, 0x7d, 0x4f, 0x9a, 0xdf, 0x35, 0x28, 0x25, 0xf6, 0xbb,
	0x00, 0xd3, 0xa7, 0x42, 0x9a, 0x60, 0xb8, 0x5e, 0xb2, 0xe2, 0x4a, 0xe5, 0xc6, 0xff, 0x8a, 0x13,
	0x4c, 0xa2, 0x9b, 0x3c, 0xc0, 0x11, 0x81, 0x99, 0x43, 0xcb, 0xcd, 0x3b, 0x34, 0x7d, 0xce, 0x4d,
	0xce, 0x67, 0x6f, 0xf2, 0x0b, 0x58, 0x3f, 0x47, 0x0c, 0x33, 0x75, 0x26, 0xdd, 0xf9, 0xee, 0x18,
	0xc5, 0x14, 0xf8, 0x3a, 0xd9, 0x73, 0x7b, 0xbd, 0x50, 0x24, 0xe1, 0xeb, 0xdd, 0x6d, 0x80, 0x59,
	0x41, 0x64, 0x05, 0xf4, 0x4e, 0xfb, 0x62, 0xe3, 0x37, 0x02, 0x60, 0xb4, 0xda, 0x67, 0xed, 0x8b,
	0xf6, 0x86, 0xd6, 0xf8, 0x51, 0x80, 0xd5, 0x96, 0xec, 0x80, 0x7c, 0x80, 0x62, 0x86, 0x2d, 0xe4,
	0x40, 0xd1, 0xed, 0x43, 0x0e, 0x55, 0xb7, 0x1e, 0x60, 0xa7, 0x9d, 0xb0, 0x2d, 0x51, 0xce, 0xa0,
	0x46, 0xa9, 0xfc, 0x10, 0x4b, 0x0b, 0x95, 0x2f, 0x61, 0x2d, 0x8b, 0x2b, 0xd2, 0x50, 0x48, 0xcf,
	0x61, 0xdb, 0x42, 0xed, 0x57, 0xa0, 0x77, 0x90, 0x11, 0xe5, 0xd4, 0xd5, 0x4a, 0x1f, 0x41, 0x3f,
	0x5d, 0x42, 0x69, 0xc6, 0xac, 0xea, 0xee, 0x32, 0xae, 0xe2, 0x51, 0x20, 0x18, 0x29, 0x74, 0xc8,
	0x9e, 0xb2, 0xd4, 0x0c, 0xdc, 0xaa, 0xfb, 0x4b, 0x7a, 0x8b, 0x34, 0x6f, 0xc1, 0x48, 0x81, 0xa0,
	0x4c, 0x73, 0x87, 0x1b, 0x0b, 0x0f, 0x05, 0xc1, 0x48, 0x5f, 0xb7, 0x52, 0xef, 0x0e, 0x15, 0x94,
	0x65, 0xdf, 0x43, 0xc6, 0x39, 0xac, 0x08, 0x3c, 0x90, 0x7d, 0xe5, 0xbd, 0xcb, 0x62, 0x64, 0x61,
	0xe1, 0x0e, 0x14, 0x24, 0x4a, 0x88, 0xa5, 0x3a, 0xc3, 0xbb, 0xcc, 0x59, 0xa8, 0xd9, 0x85, 0x7c,
	0xf2, 0x58, 0xc9, 0xee, 0x12, 0x88, 0x91, 0x5a, 0x7b, 0x4b, 0xf8, 0xde, 0xc2, 0xec, 0x99, 0x96,
	0xd4, 0x2d, 0x59, 0xa2, 0xac, 0xfb, 0x1e, 0x74, 0x16, 0xd5, 0x7d, 0xd2, 0xbc, 0x3c, 0x7e, 0xd2,
	0x4f, 0xd3, 0xd1, 0xad, 0xd1, 0x35, 0xb8, 0xe4, 0xe1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d,
	0xf8, 0xd3, 0x88, 0x7e, 0x09, 0x00, 0x00,
}
