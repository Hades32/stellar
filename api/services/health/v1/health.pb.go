// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/ehazlett/element/api/services/health/v1/health.proto

package health // import "github.com/ehazlett/element/api/services/health/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthResponse struct {
	OsName               string          `protobuf:"bytes,1,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion            string          `protobuf:"bytes,2,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	Uptime               *types.Duration `protobuf:"bytes,3,opt,name=uptime" json:"uptime,omitempty"`
	Containers           int64           `protobuf:"varint,4,opt,name=containers" json:"containers,omitempty"`
	Images               int64           `protobuf:"varint,5,opt,name=images" json:"images,omitempty"`
	Snapshots            int64           `protobuf:"varint,6,opt,name=snapshots" json:"snapshots,omitempty"`
	Tasks                int64           `protobuf:"varint,7,opt,name=tasks" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_e816b131e309812f, []int{0}
}
func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (dst *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(dst, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *HealthResponse) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *HealthResponse) GetUptime() *types.Duration {
	if m != nil {
		return m.Uptime
	}
	return nil
}

func (m *HealthResponse) GetContainers() int64 {
	if m != nil {
		return m.Containers
	}
	return 0
}

func (m *HealthResponse) GetImages() int64 {
	if m != nil {
		return m.Images
	}
	return 0
}

func (m *HealthResponse) GetSnapshots() int64 {
	if m != nil {
		return m.Snapshots
	}
	return 0
}

func (m *HealthResponse) GetTasks() int64 {
	if m != nil {
		return m.Tasks
	}
	return 0
}

func init() {
	proto.RegisterType((*HealthResponse)(nil), "element.services.health.v1.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Health service

type HealthClient interface {
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/element.services.health.v1.Health/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Health service

type HealthServer interface {
	Health(context.Context, *types.Empty) (*HealthResponse, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/element.services.health.v1.Health/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "element.services.health.v1.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Health_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/element/api/services/health/v1/health.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/element/api/services/health/v1/health.proto", fileDescriptor_health_e816b131e309812f)
}

var fileDescriptor_health_e816b131e309812f = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x25, 0xad, 0x4d, 0xc9, 0x88, 0x2e, 0x86, 0x52, 0x62, 0x94, 0xb6, 0xe8, 0xa6, 0x88, 0xcc,
	0xd0, 0xba, 0x92, 0x2e, 0x84, 0xa2, 0xe0, 0x42, 0x2c, 0xa4, 0xd0, 0x85, 0x9b, 0x32, 0xad, 0xd7,
	0x64, 0x30, 0x99, 0x1b, 0x72, 0x27, 0x01, 0x5d, 0xfa, 0xa1, 0x5d, 0xf4, 0x4b, 0xa4, 0x93, 0xa9,
	0xfa, 0xde, 0xe3, 0x2d, 0xde, 0x6a, 0xce, 0x3d, 0xe7, 0x0c, 0xf7, 0x70, 0x66, 0xd8, 0xfb, 0x4c,
	0xdb, 0xbc, 0x39, 0x88, 0x23, 0x96, 0x12, 0x72, 0xf5, 0xab, 0x00, 0x6b, 0x25, 0x14, 0x50, 0x82,
	0xb1, 0x52, 0x55, 0x5a, 0x12, 0xd4, 0xad, 0x3e, 0x02, 0xc9, 0x1c, 0x54, 0x61, 0x73, 0xd9, 0x2e,
	0x3c, 0x12, 0x55, 0x8d, 0x16, 0x79, 0xe2, 0xcd, 0xe2, 0x6a, 0x14, 0x5e, 0x6e, 0x17, 0xc9, 0xf3,
	0x0c, 0x31, 0x2b, 0x40, 0x3a, 0xe7, 0xa1, 0xf9, 0x2e, 0xa1, 0xac, 0xec, 0xcf, 0xee, 0x62, 0x32,
	0xb9, 0x2d, 0x7e, 0x6b, 0x6a, 0x65, 0x35, 0x1a, 0xaf, 0x8f, 0x32, 0xcc, 0xd0, 0x41, 0x79, 0x41,
	0x1d, 0xfb, 0xf2, 0x77, 0x8f, 0x3d, 0xfd, 0xe4, 0x16, 0xa4, 0x40, 0x15, 0x1a, 0x02, 0xfe, 0x8a,
	0x0d, 0x91, 0xf6, 0x46, 0x95, 0x10, 0x07, 0xb3, 0x60, 0x1e, 0xad, 0xd9, 0xf9, 0x34, 0x0d, 0x37,
	0xdb, 0x2f, 0xaa, 0x84, 0x34, 0x44, 0xba, 0x9c, 0xfc, 0x0d, 0x63, 0x48, 0xfb, 0x16, 0x6a, 0xd2,
	0x68, 0xe2, 0x9e, 0xf3, 0x3d, 0x39, 0x9f, 0xa6, 0xd1, 0x66, 0xbb, 0xeb, 0xc8, 0x34, 0x42, 0xf2,
	0x90, 0x2f, 0x58, 0xd8, 0x54, 0x56, 0x97, 0x10, 0xf7, 0x67, 0xc1, 0xfc, 0xf1, 0xf2, 0x99, 0xe8,
	0xc2, 0x8a, 0x6b, 0x58, 0xf1, 0xc1, 0x87, 0x4d, 0xbd, 0x91, 0x4f, 0x18, 0x3b, 0xa2, 0xb1, 0x4a,
	0x1b, 0xa8, 0x29, 0x7e, 0x34, 0x0b, 0xe6, 0xfd, 0xf4, 0x3f, 0x86, 0x8f, 0x59, 0xa8, 0x4b, 0x95,
	0x01, 0xc5, 0x03, 0xa7, 0xf9, 0x89, 0xbf, 0x60, 0x11, 0x19, 0x55, 0x51, 0x8e, 0x96, 0xe2, 0xd0,
	0x49, 0xff, 0x08, 0x3e, 0x62, 0x03, 0xab, 0xe8, 0x07, 0xc5, 0x43, 0xa7, 0x74, 0xc3, 0x72, 0xc7,
	0xc2, 0xae, 0x03, 0xfe, 0xf9, 0x2f, 0x1a, 0xdf, 0x89, 0xf8, 0xf1, 0x52, 0x76, 0xf2, 0x5a, 0xdc,
	0xff, 0x40, 0xe2, 0x66, 0x93, 0xeb, 0xd5, 0xd7, 0x77, 0x0f, 0xff, 0x0e, 0xab, 0x0e, 0x1d, 0x42,
	0xb7, 0xf8, 0xed, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xa6, 0xb0, 0xa2, 0x52, 0x02, 0x00,
	0x00,
}
