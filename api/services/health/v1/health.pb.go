// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/health/v1/health.proto

/*
Package health is a generated protocol buffer package.

It is generated from these files:
	github.com/ehazlett/stellar/api/services/health/v1/health.proto

It has these top-level messages:
	HealthResponse
	Peer
*/
package health

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HealthResponse struct {
	OSName    string `protobuf:"bytes,1,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OSVersion string `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// TODO: use gogoproto.stdtime (returning panic: message/group field time.Time:bytes without pointer when trying to use)
	StartedAt   *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	Cpus        int64                       `protobuf:"varint,4,opt,name=cpus,proto3" json:"cpus,omitempty"`
	MemoryTotal int64                       `protobuf:"varint,5,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryFree  int64                       `protobuf:"varint,6,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	MemoryUsed  int64                       `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	Peers       []*Peer                     `protobuf:"bytes,8,rep,name=peers" json:"peers,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptorHealth, []int{0} }

func (m *HealthResponse) GetOSName() string {
	if m != nil {
		return m.OSName
	}
	return ""
}

func (m *HealthResponse) GetOSVersion() string {
	if m != nil {
		return m.OSVersion
	}
	return ""
}

func (m *HealthResponse) GetStartedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *HealthResponse) GetCpus() int64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *HealthResponse) GetMemoryTotal() int64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *HealthResponse) GetMemoryFree() int64 {
	if m != nil {
		return m.MemoryFree
	}
	return 0
}

func (m *HealthResponse) GetMemoryUsed() int64 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *HealthResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorHealth, []int{1} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthResponse)(nil), "stellar.services.health.v1.HealthResponse")
	proto.RegisterType((*Peer)(nil), "stellar.services.health.v1.Peer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Health service

type HealthClient interface {
	Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/stellar.services.health.v1.Health/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Health service

type HealthServer interface {
	Health(context.Context, *google_protobuf1.Empty) (*HealthResponse, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.health.v1.Health/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Health(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.health.v1.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Health_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/health/v1/health.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/health/v1/health.proto", fileDescriptorHealth)
}

var fileDescriptorHealth = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0xd9, 0xee, 0x36, 0x35, 0xb3, 0xea, 0x61, 0x10, 0x19, 0xe2, 0x21, 0xb1, 0x5e, 0x82,
	0xc8, 0x0c, 0x5d, 0x41, 0x28, 0x3d, 0x88, 0x05, 0xc5, 0x83, 0x58, 0x99, 0xd6, 0x1e, 0xbc, 0x84,
	0xd9, 0xcd, 0x6b, 0x12, 0xc8, 0xec, 0x84, 0x79, 0x93, 0x40, 0xfd, 0x92, 0x7e, 0x83, 0x1e, 0xfa,
	0x49, 0x24, 0x33, 0x59, 0xad, 0x8a, 0x82, 0xa7, 0xfc, 0xdf, 0xff, 0xfd, 0xc2, 0xfb, 0xf3, 0xde,
	0x90, 0xd7, 0x55, 0xe3, 0xea, 0x7e, 0xcd, 0x37, 0x46, 0x0b, 0xa8, 0xd5, 0xd7, 0x16, 0x9c, 0x13,
	0xe8, 0xa0, 0x6d, 0x95, 0x15, 0xaa, 0x6b, 0x04, 0x82, 0x1d, 0x9a, 0x0d, 0xa0, 0xa8, 0x41, 0xb5,
	0xae, 0x16, 0xc3, 0xd1, 0xa4, 0x78, 0x67, 0x8d, 0x33, 0x34, 0x99, 0x60, 0xbe, 0x03, 0xf9, 0xd4,
	0x1e, 0x8e, 0x92, 0x47, 0x95, 0xa9, 0x8c, 0xc7, 0xc4, 0xa8, 0xc2, 0x1f, 0xc9, 0x93, 0xca, 0x98,
	0xaa, 0x05, 0xe1, 0xab, 0x75, 0x7f, 0x25, 0x40, 0x77, 0xee, 0x7a, 0x6a, 0xa6, 0xbf, 0x37, 0x5d,
	0xa3, 0x01, 0x9d, 0xd2, 0x5d, 0x00, 0x0e, 0xbf, 0xed, 0x91, 0x87, 0xef, 0xfd, 0x04, 0x09, 0xd8,
	0x99, 0x2d, 0x02, 0x7d, 0x46, 0x0e, 0x0c, 0x16, 0x5b, 0xa5, 0x81, 0xcd, 0xb2, 0x59, 0x1e, 0x9f,
	0x92, 0xdb, 0x9b, 0x34, 0x3a, 0x3b, 0xff, 0xa8, 0x34, 0xc8, 0xc8, 0xe0, 0xf8, 0xa5, 0x2f, 0x08,
	0x31, 0x58, 0x0c, 0x60, 0xb1, 0x31, 0x5b, 0xb6, 0xe7, 0xb9, 0x07, 0xb7, 0x37, 0x69, 0x7c, 0x76,
	0x7e, 0x19, 0x4c, 0x19, 0x1b, 0x9c, 0x24, 0x3d, 0x26, 0x04, 0x9d, 0xb2, 0x0e, 0xca, 0x42, 0x39,
	0x36, 0xcf, 0x66, 0xf9, 0x72, 0x95, 0xf0, 0x90, 0x8d, 0xef, 0xb2, 0xf1, 0x8b, 0x5d, 0x36, 0x19,
	0x4f, 0xf4, 0x1b, 0x47, 0x29, 0x59, 0x6c, 0xba, 0x1e, 0xd9, 0x22, 0x9b, 0xe5, 0x73, 0xe9, 0x35,
	0x7d, 0x4a, 0xee, 0x6b, 0xd0, 0xc6, 0x5e, 0x17, 0xce, 0x38, 0xd5, 0xb2, 0x7d, 0xdf, 0x5b, 0x06,
	0xef, 0x62, 0xb4, 0x68, 0x4a, 0xa6, 0xb2, 0xb8, 0xb2, 0x00, 0x2c, 0xf2, 0x04, 0x09, 0xd6, 0x3b,
	0x0b, 0x70, 0x07, 0xe8, 0x11, 0x4a, 0x76, 0x70, 0x17, 0xf8, 0x8c, 0x50, 0xd2, 0x57, 0x64, 0xbf,
	0x03, 0xb0, 0xc8, 0xee, 0x65, 0xf3, 0x7c, 0xb9, 0xca, 0xf8, 0xdf, 0x2f, 0xc3, 0x3f, 0x01, 0x58,
	0x19, 0xf0, 0x43, 0x4e, 0x16, 0x63, 0x39, 0x06, 0xff, 0xb9, 0x43, 0xe9, 0xf5, 0xe8, 0xa9, 0xb2,
	0xb4, 0x61, 0x5f, 0xd2, 0xeb, 0xd5, 0x25, 0x89, 0xc2, 0x01, 0xe8, 0x87, 0x1f, 0xea, 0xf1, 0x1f,
	0xbb, 0x79, 0x3b, 0x1e, 0x35, 0x79, 0xfe, 0xaf, 0x10, 0xbf, 0x9e, 0xf1, 0xf4, 0xe4, 0xcb, 0xf1,
	0xff, 0x3f, 0xc6, 0x93, 0xa0, 0xd6, 0x91, 0x1f, 0xfc, 0xf2, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf4, 0xae, 0x6e, 0x11, 0xd0, 0x02, 0x00, 0x00,
}
